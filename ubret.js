(function() {
  var Ubret;

  if (typeof require === 'function' && typeof exports === 'object' && typeof module === object) {
    Ubret = {
      Statistics: require('./controllers/Statistics'),
      SubjectViewer: require('./controllers/SubjectViewer'),
      Table: require('./controllers/Table')
    };
    module.exports = Ubret;
  } else {
    window.Ubret = new Object;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseTool = (function() {

    BaseTool.prototype.required_opts = ['data'];

    function BaseTool(opts) {
      this.prettyKey = __bind(this.prettyKey, this);

      this.extractKeys = __bind(this.extractKeys, this);

      this.selectTool = __bind(this.selectTool, this);
      if (!_.has(opts, 'data')) {
        throw 'must provide data';
      } else {
        this.data = opts.data;
      }
      if (!_.has(opts, 'selector')) {
        throw 'must provide selector';
      } else {
        this.selector = opts.selector;
      }
      this.extractKeys();
    }

    BaseTool.prototype.selectTool = function() {
      return this.tool_view = $("" + this.selector);
    };

    BaseTool.prototype.extractKeys = function() {
      var dataKey, key, value, _ref, _results;
      this.keys = [];
      _ref = this.data[0];
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        if (typeof value !== 'function') {
          dataKey = key;
        }
        if (__indexOf.call(undesiredKeys, dataKey) < 0) {
          _results.push(this.keys.push(dataKey));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BaseTool.prototype.prettyKey = function(key) {
      return this.capitalizeWords(this.underscoresToSpaces(key));
    };

    BaseTool.prototype.underscoresToSpaces = function(string) {
      return string.replace(/_/g, " ");
    };

    BaseTool.prototype.capitalizeWords = function(string) {
      return string.replace(/(\b[a-z])/g, function(char) {
        return char.toUpperCase();
      });
    };

    return BaseTool;

  })();

  module.exports = BaseTool;

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseController, Map, SubjectViewer, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore/underscore');

  BaseController = require('./BaseController');

  SubjectViewer = require('./SubjectViewer');

  Map = (function(_super) {

    __extends(Map, _super);

    Map.prototype.name = 'Map';

    Map.mapOptions = {
      attributionControl: false
    };

    L.Icon.Default.imagePath = 'css/images';

    Map.prototype.default_icon = new L.icon({
      className: 'default_icon',
      iconUrl: '/css/images/marker-icon.png',
      iconSize: [25, 41],
      iconAnchor: [13, 41]
    });

    Map.prototype.selected_icon = new L.icon({
      className: 'selected_icon',
      iconUrl: '/css/images/marker-icon-orange.png',
      iconSize: [25, 41],
      iconAnchor: [13, 41]
    });

    function Map() {
      this.selectSubject = __bind(this.selectSubject, this);

      this.selected = __bind(this.selected, this);

      this.plotObjects = __bind(this.plotObjects, this);

      this.plotObject = __bind(this.plotObject, this);

      this.createSky = __bind(this.createSky, this);

      this.start = __bind(this.start, this);

      this.render = __bind(this.render, this);
      Map.__super__.constructor.apply(this, arguments);
      this.circles = [];
      this.subscribe(this.subChannel, this.process);
    }

    Map.prototype.render = function() {
      return this.html(require('../views/map')({
        index: this.index
      }));
    };

    Map.prototype.start = function() {
      if (!this.map) {
        this.createSky();
      }
      if (this.data) {
        return this.plotObjects();
      }
    };

    Map.prototype.createSky = function() {
      this.map = L.map("sky-" + this.index, Map.mapOptions).setView([0, 180], 6);
      this.layer = L.tileLayer('/tiles/#{zoom}/#{tilename}.jpg', {
        maxZoom: 7
      });
      this.layer.getTileUrl = function(tilePoint) {
        var convertTileUrl, url, zoom;
        zoom = this._getZoomForUrl();
        convertTileUrl = function(x, y, s, zoom) {
          var d, e, f, g, pixels;
          pixels = Math.pow(2, zoom);
          d = (x + pixels) % pixels;
          e = (y + pixels) % pixels;
          f = "t";
          g = 0;
          while (g < zoom) {
            pixels = pixels / 2;
            if (e < pixels) {
              if (d < pixels) {
                f += "q";
              } else {
                f += "r";
                d -= pixels;
              }
            } else {
              if (d < pixels) {
                f += "t";
                e -= pixels;
              } else {
                f += "s";
                d -= pixels;
                e -= pixels;
              }
            }
            g++;
          }
          return {
            x: x,
            y: y,
            src: f,
            s: s
          };
        };
        url = convertTileUrl(tilePoint.x, tilePoint.y, 1, zoom);
        return "/tiles/" + zoom + "/" + url.src + ".jpg";
      };
      return this.layer.addTo(this.map);
    };

    Map.prototype.plotObject = function(subject, options) {
      var circle, coords, icon, subject_viewer,
        _this = this;
      coords = [subject.dec, subject.ra];
      options = icon = new L.icon({
        iconSize: [25, 41],
        iconAnchor: [13, 41]
      });
      circle = new L.marker(coords, options);
      circle.zooniverse_id = subject.zooniverse_id;
      circle.addTo(this.map);
      subject_viewer = new SubjectViewer;
      subject_viewer.receiveData([subject]);
      subject_viewer.render();
      circle.bindPopup(subject_viewer.el.get(0).outerHTML, {
        maxWidth: 460
      });
      circle.on('click', function() {
        _this.selectSubject(circle);
        return _this.publish([
          {
            message: "selected",
            item_id: circle.zooniverse_id
          }
        ]);
      });
      return this.circles.push(circle);
    };

    Map.prototype.plotObjects = function() {
      var latlng, marker, subject, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.circles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        this.map.removeLayer(marker);
      }
      this.circles = new Array;
      this.filterData();
      _ref1 = this.filteredData;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        subject = _ref1[_j];
        this.plotObject(subject);
      }
      latlng = new L.LatLng(this.data[0].dec, this.data[0].ra);
      return this.map.panTo(latlng);
    };

    Map.prototype.selected = function(itemId) {
      var c, circle, item, latlng;
      item = _.find(this.data, function(subject) {
        return subject.zooniverse_id = itemId;
      });
      latlng = new L.LatLng(item.dec, item.ra);
      circle = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.circles;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c.zooniverse_id === itemId) {
            _results.push(c);
          }
        }
        return _results;
      }).call(this))[0];
      return this.selectSubject(circle);
    };

    Map.prototype.selectSubject = function(circle) {
      if (this.selected_subject != null) {
        this.selected_subject.setIcon(this.default_icon);
      }
      this.selected_subject = circle;
      circle.openPopup();
      return circle.setIcon(this.selected_icon);
    };

    return Map;

  })(BaseController);

  module.exports = Map;

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var Statistics,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Statistics = (function() {

    Statistics.prototype.attributes = {
      currentKey: {
        name: 'currentKey',
        events: [
          {
            'selector': 'change .key',
            'callback': 'selectKey',
            'action': 'change'
          }
        ]
      }
    };

    Statistics.prototype.template = "<div class=\"stats\">\n  <select class=\"key\" name=\"key\" id=\"select-key\">\n    <% for key in @keys: %>\n      <% if key is @currentKey: %>\n        <option name=\"key\" value=\"<%- key %>\" selected><%- key %></option>\n      <% else: %>\n        <option name=\"key\" value=\"<%- key %>\"><%- key %></option>\n      <% end %>\n    <% end %>\n  </select>\n\n  <ul>\n    <% for stat in @stats: %>\n    <li>\n      <label><%- stat.label %>:</label>\n      <% if stat.view: %>\n        <%- stat.view %>\n      <% else: %>\n        <%- stat.value %>\n      <% end %>\n    </li>\n    <% end %>\n  </ul>\n</div>";

    function Statistics(opts) {
      this.getKurtosis = __bind(this.getKurtosis, this);

      this.getSkew = __bind(this.getSkew, this);

      this.getPercentile = __bind(this.getPercentile, this);

      this.getStandardDeviation = __bind(this.getStandardDeviation, this);

      this.getVariance = __bind(this.getVariance, this);

      this.getMax = __bind(this.getMax, this);

      this.getMin = __bind(this.getMin, this);

      this.getMode = __bind(this.getMode, this);

      this.getMedian = __bind(this.getMedian, this);

      this.getMean = __bind(this.getMean, this);

      this.selectKey = __bind(this.selectKey, this);

      this.changeSelectedKey = __bind(this.changeSelectedKey, this);

      this.start = __bind(this.start, this);
      Statistics.__super__.constructor.apply(this, arguments);
      this.selectKey(this.keys[0]);
      this.start();
    }

    Statistics.prototype.start = function() {
      var compiled, data;
      data = _.pluck(this.data, this.currentKey);
      this.stats = [];
      if (_.any(data, (function(datum) {
        return _.isNaN(parseFloat(datum));
      }))) {

      } else {
        data = _.map(data, function(num) {
          return parseFloat(num);
        });
      }
      this.stats.push(this.getMean(data));
      this.stats.push(this.getMedian(data));
      this.stats.push(this.getMode(data));
      this.stats.push(this.getMin(data));
      this.stats.push(this.getMax(data));
      this.stats.push(this.getVariance(data));
      this.stats.push(this.getStandardDeviation(data));
      this.stats.push(this.getPercentile(data));
      this.stats.push(this.getSkew(data));
      this.stats.push(this.getKurtosis(data));
      compiled = _.template(this.template, {
        keys: this.keys,
        stats: this.stats,
        currentKey: this.currentKey
      });
      return this.tool_view.html(compiled);
    };

    Statistics.prototype.changeSelectedKey = function(e) {
      this.currentKey = $(e.currentTarget).val();
      return this.start();
    };

    Statistics.prototype.selectKey = function(key) {
      this.currentKey = key;
      return this.currentKey;
    };

    Statistics.prototype.getMean = function(data) {
      var average, average_object;
      average = _.reduce(data, (function(memo, num) {
        return memo + num;
      })) / data.length;
      return average_object = {
        'label': 'Mean',
        'value': average
      };
    };

    Statistics.prototype.getMedian = function(data) {
      var median, median_object, mid_point;
      data = _.sortBy(data, function(num) {
        return num;
      });
      mid_point = data.length / 2;
      if (mid_point % 1) {
        median = (data[Math.floor(mid_point)] + data[Math.ceil(mid_point)]) / 2;
      } else {
        median = data[data.length / 2];
      }
      return median_object = {
        'label': 'Median',
        'value': median
      };
    };

    Statistics.prototype.getMode = function(data) {
      var key, keys, mode, mode_data, mode_object, _i, _len;
      data = _.groupBy(data, function(datum) {
        return datum;
      });
      keys = _.keys(data);
      mode_data = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        mode_data.push({
          'key': key,
          'num': data[key].length
        });
      }
      mode = _.max(mode_data, function(datum) {
        return datum.num;
      });
      return mode_object = {
        'label': 'Mode',
        'value': mode.key
      };
    };

    Statistics.prototype.getMin = function(data) {
      var min_object;
      return min_object = {
        'label': 'Minimum',
        'value': _.min(data)
      };
    };

    Statistics.prototype.getMax = function(data) {
      var max_object;
      return max_object = {
        'label': 'Maximum',
        'value': _.max(data)
      };
    };

    Statistics.prototype.getVariance = function(data) {
      var data_count, mean, variance, variance_data, variance_object;
      data_count = data.length;
      mean = this.getMean(data);
      data = _.map(data, function(datum) {
        return Math.pow(Math.abs(datum - mean.value), 2);
      });
      variance_data = _.reduce(data, function(memo, datum) {
        return memo + datum;
      });
      variance = variance_data / data_count;
      return variance_object = {
        'label': 'Variance',
        'value': variance
      };
    };

    Statistics.prototype.getStandardDeviation = function(data) {
      var standard_deviation, standard_deviation_object, variance;
      variance = (this.getVariance(data)).value;
      standard_deviation = Math.sqrt(variance);
      return standard_deviation_object = {
        'label': 'Standard Deviation',
        'value': standard_deviation
      };
    };

    Statistics.prototype.getPercentile = function(data) {
      var i, percent, percentile, percentile_data, percentile_object, percentile_view, value_object, _i;
      data = _.sortBy(data, function(datum) {
        return datum;
      });
      percentile_data = [];
      for (i = _i = 1; _i <= 10; i = ++_i) {
        percent = i / 10;
        percentile = data[Math.floor((data.length * percent) - 1)];
        value_object = {
          'label': (percent * 100) + 'th',
          'value': percentile
        };
        percentile_data.push(value_object);
      }
      percentile_view = "<ul>\n  <% for set, i in @data: %>\n    <li><%- set.label %>: <%- set.value %></li>\n  <% end %>\n</ul>";
      return percentile_object = {
        'label': 'Percentile',
        'value': percentile_data,
        'view': _.template(percentile_view, {
          data: percentile_data
        })
      };
    };

    Statistics.prototype.getSkew = function(data) {
      var denom, mean, skew, skew_object, standard_deviation, sum;
      mean = (this.getMean(data)).value;
      standard_deviation = (this.getStandardDeviation(data)).value;
      sum = _.reduce(data, (function(memo, datum) {
        return Math.pow(datum - mean, 3) + memo;
      }), 0);
      denom = data.length * Math.pow(standard_deviation, 3);
      skew = sum / denom;
      return skew_object = {
        'label': 'Skew',
        'value': skew
      };
    };

    Statistics.prototype.getKurtosis = function(data) {
      var denom, kurtosis, kurtosis_object, mean, standard_deviation, sum;
      mean = (this.getMean(data)).value;
      standard_deviation = (this.getStandardDeviation(data)).value;
      sum = _.reduce(data, (function(memo, datum) {
        return Math.pow(datum - mean, 4) + memo;
      }), 0);
      denom = data.length * Math.pow(standard_deviation, 4);
      kurtosis = sum / denom;
      return kurtosis_object = {
        'label': 'Kurtosis',
        'value': kurtosis
      };
    };

    return Statistics;

  })();

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Statistics;
  } else {
    window.Ubret['Statistics'] = Statistics;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, SubjectViewer, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('underscore/underscore');

  BaseTool = require('BaseTool');

  SubjectViewer = (function(_super) {

    __extends(SubjectViewer, _super);

    SubjectViewer.prototype.attributes = {
      currentSubject: {
        name: 'currentSubject',
        "default": 0,
        events: [
          {
            'selector': 'click .nav .prev',
            'callback': 'prevSubject',
            'action': 'change'
          }, {
            'selector': 'click .nav .next',
            'callback': 'nextSubject',
            'action': 'change'
          }
        ]
      }
    };

    SubjectViewer.prototype.template = "<% if @subject: %>\n  <% if @count > 1: %>\n    <div class=\"nav\">\n      <a class=\"back\">back</a>\n      <a class=\"next\">next</a>\n    </div>\n  <% end %>\n\n  <% if @subject.image: %>\n    <img src=\"<%- @subject.image %>\" />\n  <% end %>\n\n  <ul>\n    <li>id: <%- @subject.zooniverse_id %></li>\n    <% for key, value of @keys: %>\n      <li><%- key %>: <%- if typeof(@subject[value]) isnt 'string' then @format(@subject[value]) else @subject[value] %> <%- @labels[value] %></li>\n    <% end %>\n  </ul>\n<% end %>";

    function SubjectViewer(opts) {
      this.select = __bind(this.select, this);

      this.nextSubject = __bind(this.nextSubject, this);

      this.prevSubject = __bind(this.prevSubject, this);

      this.getCurrentSubject = __bind(this.getCurrentSubject, this);

      this.render = __bind(this.render, this);

      this.start = __bind(this.start, this);
      SubjectViewer.__super__.constructor.apply(this, arguments);
      this.format = this.format || d3.format(',.02f');
      this.start();
    }

    SubjectViewer.prototype.start = function() {
      return this.render();
    };

    SubjectViewer.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template, {
        subject: this.getCurrentSubject(),
        keys: this.keys,
        count: this.data.length,
        format: this.format
      });
      return this.tool_view.html(compiled);
    };

    SubjectViewer.prototype.getCurrentSubject = function() {
      return this.data[this.count];
    };

    SubjectViewer.prototype.prevSubject = function(count) {
      this.count -= 1;
      if (this.count < 0) {
        this.count = this.data.length - 1;
      }
      return this.count;
    };

    SubjectViewer.prototype.nextSubject = function(count) {
      this.count += 1;
      if (this.count >= this.data.length) {
        this.count = 0;
      }
      return this.count;
    };

    SubjectViewer.prototype.validateCurrentSubject = function(currentSubject) {
      return console.log('noop');
    };

    SubjectViewer.prototype.select = function(itemId) {
      var subject, subjectIndex;
      subject = _.find(this.data, function(datum) {
        return datum.zooniverse_id === itemId;
      });
      subjectIndex = _.indexOf(this.data, subject);
      this.count = subjectIndex;
      return this.render();
    };

    return SubjectViewer;

  })(BaseTool);

  module.exports = SubjectViewer;

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var Table,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Table = (function() {

    function Table(keys, data, selector) {
      this.keys = keys;
      this.data = data;
      this.selector = selector;
      this.changeData = __bind(this.changeData, this);

      this.highlightRow = __bind(this.highlightRow, this);

      this.selectRow = __bind(this.selectRow, this);

      this.selectColumn = __bind(this.selectColumn, this);

      this.toArray = __bind(this.toArray, this);

      this.createRows = __bind(this.createRows, this);

      this.createHeader = __bind(this.createHeader, this);

      this.selectTable = __bind(this.selectTable, this);

      this.selectTable();
      this.createHeader();
      this.createRows();
    }

    Table.prototype.selectTable = function() {
      this.thead = d3.select("" + this.selector + " thead");
      return this.tbody = d3.select("" + this.selector + " tbody");
    };

    Table.prototype.createHeader = function() {
      var _this = this;
      return this.thead.selectAll("th").data(this.keys).enter().append("th").on('click', function(d, i) {
        return _this.selectColumn(d);
      }).attr('data-key', function(d) {
        return d;
      }).text(function(d) {
        return _this.formatKey(d);
      });
    };

    Table.prototype.createRows = function(sortAttr) {
      var tr,
        _this = this;
      if (sortAttr == null) {
        sortAttr = 'id';
      }
      this.tbody.selectAll('tr').remove();
      tr = this.tbody.selectAll('tr').data(this.data).enter().append('tr').sort(function(a, b) {
        if (a === null || b === null) {
          return 0;
        } else {
          return _this.compare(a[sortAttr], b[sortAttr]);
        }
      }).attr('data-id', function(d) {
        return d.id;
      }).on('click', function(d, i) {
        return _this.selectRow(d);
      });
      tr.selectAll('td').data(function(d) {
        return _this.toArray(d);
      }).enter().append('td').text(function(d) {
        return d;
      });
      if (this.selected != null) {
        return this.highlightRow();
      }
    };

    Table.prototype.compare = function(a, b) {
      if (typeof a === 'string') {
        return a.localeCompare(b);
      } else {
        if (a < b) {
          return -1;
        } else {
          if (a > b) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };

    Table.prototype.toArray = function(data) {
      var key, ret, _i, _len, _ref;
      ret = new Array;
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        ret.push(data[key]);
      }
      return ret;
    };

    Table.prototype.formatKey = function(key) {
      return (key.replace(/_/g, " ")).replace(/(\b[a-z])/g, function(char) {
        return char.toUpperCase();
      });
    };

    Table.prototype.selectColumn = function(key) {
      return this.createRows(key);
    };

    Table.prototype.selectRow = function(datum) {
      if (typeof this.selected !== 'undefined') {
        this.tbody.select("[data-id=" + this.selected + "]").attr('class', '');
      }
      this.selected = datum.id;
      return this.highlightRow();
    };

    Table.prototype.highlightRow = function() {
      return this.tbody.select("[data-id=" + this.selected + "]").attr('class', 'selected');
    };

    Table.prototype.changeData = function(data) {
      this.data = data;
      return this.createRows();
    };

    return Table;

  })();

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Table;
  } else {
    window.Ubret['Table'] = Table;
  }

}).call(this);
