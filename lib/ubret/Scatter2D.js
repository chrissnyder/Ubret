// Generated by CoffeeScript 1.4.0
(function() {
  var Graph, Scatter2D,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Graph = window.Ubret.Graph || require('./Graph');

  Scatter2D = (function(_super) {

    __extends(Scatter2D, _super);

    Scatter2D.prototype.axes = 2;

    Scatter2D.prototype.template = "<div class=\"scatter-2d\">\n  <div id=\"<%- selector %>\">\n    <svg></svg>\n  </div>\n</div>";

    function Scatter2D(opts) {
      this.brushend = __bind(this.brushend, this);

      this.drawBrush = __bind(this.drawBrush, this);

      this.drawData = __bind(this.drawData, this);

      this.setupData = __bind(this.setupData, this);
      Scatter2D.__super__.constructor.call(this, opts);
    }

    Scatter2D.prototype.setupData = function() {
      var data,
        _this = this;
      data = this.dimensions[this.axis1].top(Infinity);
      this.data = _.map(data, function(d) {
        return _.pick(d, _this.axis1, _this.axis2);
      });
      this.xDomain = this.bufferAxes(d3.extent(this.data, function(d) {
        return d[_this.axis1];
      }));
      return this.yDomain = this.bufferAxes(d3.extent(this.data, function(d) {
        return d[_this.axis2];
      }));
    };

    Scatter2D.prototype.drawData = function() {
      var _this = this;
      return this.points = this.svg.append('g').selectAll('circle').data(this.data).enter().append('circle').attr('class', 'dot').attr('r', 1.5).attr('cx', function(d) {
        return _this.x(d[_this.axis1]);
      }).attr('cy', function(d) {
        return _this.y(d[_this.axis2]);
      }).on('mouseover', this.displayTooltip).on('mouseout', this.removeTooltip);
    };

    Scatter2D.prototype.drawBrush = function() {
      return this.svg.append('g').attr('class', 'brush').attr('width', this.graphWidth).attr('height', this.graphHeight).attr('height', this.graphHeight).attr('opacity', 0.5).attr('fill', '#CD3E20').call(d3.svg.brush().x(this.x).y(this.y).on('brushend', this.brushend));
    };

    Scatter2D.prototype.brushend = function() {
      var axis, d, data, dimension, top, x, y, _ref,
        _this = this;
      _ref = this.dimensions;
      for (axis in _ref) {
        dimension = _ref[axis];
        dimension.filterAll();
      }
      d = d3.event.target.extent();
      x = d.map(function(x) {
        return x[0];
      });
      y = d.map(function(x) {
        return x[1];
      });
      this.dimensions[this.axis1].filter(x);
      this.dimensions[this.axis2].filter(y);
      top = this.dimensions[this.axis1].top(Infinity);
      data = _.map(top, function(d) {
        return _.pick(d, _this.axis1, _this.axis2);
      });
      return console.log(data);
    };

    return Scatter2D;

  })(Graph);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Scatter2D;
  } else {
    window.Ubret['Scatter2D'] = Scatter2D;
  }

}).call(this);
