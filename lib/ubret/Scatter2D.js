// Generated by CoffeeScript 1.3.3
(function() {
  var Graph, Scatter2D,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Graph = window.Ubret.Graph || require('./Graph');

  Scatter2D = (function(_super) {

    __extends(Scatter2D, _super);

    Scatter2D.prototype.axes = 2;

    Scatter2D.prototype.template = "<div class=\"scatter-2d\">\n  <div id=\"<%- selector %>\">\n    <svg></svg>\n  </div>\n</div>";

    function Scatter2D(opts) {
      this.draw = __bind(this.draw, this);
      console.log('Scatter2D');
      Scatter2D.__super__.constructor.call(this, opts);
    }

    Scatter2D.prototype.draw = function() {
      var data, xAxis, xDomain, yAxis, yDomain,
        _this = this;
      console.log('Scatter2D draw');
      data = this.dimensions[this.axis1].top(Infinity);
      data = _.map(data, function(d) {
        return _.pick(d, _this.axis1, _this.axis2);
      });
      xDomain = this.bufferAxes(d3.extent(data, function(d) {
        return d[_this.axis1];
      }));
      yDomain = this.bufferAxes(d3.extent(data, function(d) {
        return d[_this.axis2];
      }));
      this.x = d3.scale.linear().range([0, this.graphWidth]).domain(xDomain);
      xAxis = d3.svg.axis().scale(this.x).orient('bottom');
      this.svg.append('g').attr('class', 'x axis').attr('transform', "translate(0, " + this.graphHeight + ")").call(xAxis);
      this.svg.append('text').attr('class', 'x label').attr('text-anchor', 'middle').attr('x', this.graphWidth / 2).attr('y', this.graphHeight + 40).text(this.formatKey(this.axis1));
      this.y = d3.scale.linear().range([this.graphHeight, 0]).domain(yDomain);
      yAxis = d3.svg.axis().scale(this.y).orient('left');
      this.svg.append('g').attr('class', 'y axis').attr('transform', "translate(0, 0)").call(yAxis);
      this.svg.append('text').attr('class', 'y label').attr('text-anchor', 'middle').attr('y', -60).attr('x', -(this.graphHeight / 2)).attr('transform', "rotate(-90)").text(this.formatKey(this.axis2));
      return this.points = this.svg.append('g').selectAll('circle').data(data).enter().append('circle').attr('class', 'dot').attr('r', 1.5).attr('cx', function(d) {
        return _this.x(d[_this.axis1]);
      }).attr('cy', function(d) {
        return _this.y(d[_this.axis2]);
      }).on('mouseover', this.displayTooltip).on('mouseout', this.removeTooltip);
    };

    return Scatter2D;

  })(Graph);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Scatter2D;
  } else {
    window.Ubret['Scatter2D'] = Scatter2D;
  }

}).call(this);
