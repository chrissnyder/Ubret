// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Statistics,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseTool = window.Ubret.BaseTool || require('./base_tool');

  Statistics = (function(_super) {

    __extends(Statistics, _super);

    function Statistics(opts) {
      this.kurtosis = __bind(this.kurtosis, this);

      this.skew = __bind(this.skew, this);

      this.standardDeviation = __bind(this.standardDeviation, this);

      this.variance = __bind(this.variance, this);

      this.max = __bind(this.max, this);

      this.min = __bind(this.min, this);

      this.mode = __bind(this.mode, this);

      this.median = __bind(this.median, this);

      this.mean = __bind(this.mean, this);

      this.displayStats = __bind(this.displayStats, this);

      this.createStats = __bind(this.createStats, this);

      this.createList = __bind(this.createList, this);

      this.start = __bind(this.start, this);
      Statistics.__super__.constructor.call(this, opts);
      this.displayFormat = opts.format ? d3.format(opts.format) : d3.format(',.03f');
    }

    Statistics.prototype.start = function() {
      Statistics.__super__.start.apply(this, arguments);
      if (!this.selectedKey) {
        this.selectedKey = this.keys[0];
      }
      this.createList();
      this.createStats();
      return this.displayStats();
    };

    Statistics.prototype.createList = function() {
      this.title = d3.select(this.selector).append('h3').attr('class', 'stat-key');
      return this.ul = d3.select(this.selector).append('ul').attr('class', 'statistics');
    };

    Statistics.prototype.createStats = function() {
      var stat, _i, _len, _ref, _results;
      this.statistics = new Array;
      _ref = ['mean', 'median', 'mode', 'min', 'max', 'variance', 'standardDeviation', 'skew', 'kurtosis'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stat = _ref[_i];
        _results.push(this.statistics.push([stat, this[stat]()]));
      }
      return _results;
    };

    Statistics.prototype.displayStats = function() {
      var li,
        _this = this;
      this.ul.selectAll('li').remove();
      this.title.text(this.formatKey(this.selectedKey));
      return li = this.ul.selectAll('li').data(this.statistics).enter().append('li').attr('data-stat', function(d) {
        return d[0];
      }).text(function(d) {
        return "" + (_this.formatKey(d[0])) + ": " + (_this.displayFormat(d[1]));
      });
    };

    Statistics.prototype.mean = function() {
      var count, sum,
        _this = this;
      count = this.dimensions.id.groupAll().reduceCount().value();
      sum = this.dimensions.id.groupAll().reduce((function(p, v) {
        return p + v[_this.selectedKey];
      }), (function(p, v) {
        return p - v[_this.selectedKey];
      }), (function(p, v) {
        return 0;
      })).value();
      return sum / count;
    };

    Statistics.prototype.median = function() {
      var bottomPoint, count, median, midPoint, topPoint;
      count = this.dimensions.id.groupAll().reduceCount().value();
      midPoint = count / 2;
      if (midPoint % 1) {
        topPoint = Math.ceil(midPoint);
        bottomPoint = Math.floor(midPoint);
        topPoint = _.last(this.dimensions[this.selectedKey].top(topPoint))[this.selectedKey];
        bottomPoint = _.last(this.dimensions[this.selectedKey].top(bottomPoint))[this.selectedKey];
        median = (topPoint + bottomPoint) / 2;
      } else {
        median = this.dimensions[this.selectedKey].top(midPoint);
        median = _.last(median)[this.selectedKey];
      }
      return median;
    };

    Statistics.prototype.mode = function() {
      var mode;
      mode = this.dimensions[this.selectedKey].group().reduceCount().top(1);
      return mode[0].key;
    };

    Statistics.prototype.min = function() {
      return this.dimensions[this.selectedKey].bottom(1)[0][this.selectedKey];
    };

    Statistics.prototype.max = function() {
      return this.dimensions[this.selectedKey].top(1)[0][this.selectedKey];
    };

    Statistics.prototype.variance = function() {
      var count, mean, variance, varianceFormulaAdd, varianceFormulaRemove,
        _this = this;
      count = this.dimensions.id.groupAll().reduceCount().value();
      mean = this.mean();
      varianceFormulaAdd = function(p, v) {
        return p + Math.pow(Math.abs(v[_this.selectedKey] - mean), 2);
      };
      varianceFormulaRemove = function(p, v) {
        return p - Math.pow(Math.abs(v[_this.selectedKey] - mean), 2);
      };
      variance = this.dimensions.id.groupAll().reduce(varianceFormulaAdd, varianceFormulaRemove, function(p, v) {
        return 0;
      }).value();
      return variance / count;
    };

    Statistics.prototype.standardDeviation = function() {
      return Math.sqrt(this.variance());
    };

    Statistics.prototype.skew = function() {
      var count, denom, mean, reduceAdd, reduceRemove, standardDeviation, sum,
        _this = this;
      mean = this.mean();
      standardDeviation = this.standardDeviation();
      count = this.dimensions.id.groupAll().reduceCount().value();
      reduceAdd = function(p, v) {
        return p + Math.pow(v[_this.selectedKey] - mean, 3);
      };
      reduceRemove = function(p, v) {
        return p - Math.pow(v[_this.selectedKey] - mean, 3);
      };
      sum = this.dimensions.id.groupAll().reduce(reduceAdd, reduceRemove, function(p, v) {
        return 0;
      }).value();
      denom = count * Math.pow(standardDeviation, 3);
      return sum / denom;
    };

    Statistics.prototype.kurtosis = function() {
      var count, denom, kurtosis, mean, reduceAdd, reduceRemove, standardDeviation, sum,
        _this = this;
      mean = this.mean();
      standardDeviation = this.standardDeviation();
      count = this.dimensions.id.groupAll().reduceCount().value();
      reduceAdd = function(p, v) {
        return p + Math.pow(v[_this.selectedKey] - mean, 4);
      };
      reduceRemove = function(p, v) {
        return p - Math.pow(v[_this.selectedKey] - mean, 4);
      };
      sum = this.dimensions.id.groupAll().reduce(reduceAdd, reduceRemove, function(p, v) {
        return 0;
      }).value();
      denom = count * Math.pow(standardDeviation, 4);
      return kurtosis = sum / denom;
    };

    return Statistics;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Statistics;
  } else {
    window.Ubret['Statistics'] = Statistics;
  }

}).call(this);
