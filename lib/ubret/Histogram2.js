// Generated by CoffeeScript 1.3.3
(function() {
  var Graph, Histogram2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Graph = window.Ubret.Graph || require('./Graph');

  Histogram2 = (function(_super) {

    __extends(Histogram2, _super);

    Histogram2.prototype.axes = 1;

    Histogram2.prototype.template = "<div class=\"histogram\">\n  <div id=\"<%- selector %>\">\n    <svg></svg>\n  </div>\n</div>";

    function Histogram2(opts) {
      this.start = __bind(this.start, this);

      this.setXVar = __bind(this.setXVar, this);

      this.drawBars = __bind(this.drawBars, this);
      console.log('Histogram2');
      Histogram2.__super__.constructor.call(this, opts);
      this.yLabel = opts.yLabel || 'Count';
    }

    Histogram2.prototype.drawBars = function(bins, color, halfSize, offset) {
      var bar, width, witth,
        _this = this;
      if (halfSize == null) {
        halfSize = false;
      }
      if (offset == null) {
        offset = false;
      }
      width = this.x(bins[1].x) - this.x(bins[0].x);
      width = halfSize ? (width / 2) - 1 : width - 2;
      witth = offset ? width - 1 : width;
      bar = this.svg.selectAll(".bar-" + color).data(bins).enter().append('g').attr('class', 'bar').attr('transform', function(d) {
        if (offset) {
          return "translate(" + (_this.x(d.x) + width + 1) + ", " + (_this.y(d.y) - 1) + ")";
        } else {
          return "translate(" + (_this.x(d.x)) + ", " + (_this.y(d.y) - 1) + ")";
        }
      });
      bar.append('rect').attr('x', 1).attr('width', Math.floor(width)).attr('height', function(d) {
        return _this.graphHeight - _this.y(d.y);
      }).attr('fill', color);
      return bar.append('text').attr("dy", ".75em").attr("y", 6).attr("x", width / 2).attr("text-anchor", "middle").text(function(d) {
        return _this.formatCount(d.y);
      });
    };

    Histogram2.prototype.setXVar = function(variable) {
      this.selectedKey = variable;
      return this.createGraph();
    };

    Histogram2.prototype.start = function() {
      return this.createGraph();
    };

    return Histogram2;

  })(Graph);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Histogram2;
  } else {
    window.Ubret['Histogram2'] = Histogram2;
  }

}).call(this);
