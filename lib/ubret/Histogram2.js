// Generated by CoffeeScript 1.3.3
(function() {
  var Graph, Histogram2,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Graph = window.Ubret.Graph || require('./Graph');

  Histogram2 = (function(_super) {

    __extends(Histogram2, _super);

    Histogram2.prototype.axes = 1;

    Histogram2.prototype.template = "<div class=\"histogram\">\n  <div id=\"<%- selector %>\">\n    <svg></svg>\n  </div>\n</div>";

    function Histogram2(opts) {
      this.draw = __bind(this.draw, this);
      console.log('Histogram2');
      Histogram2.__super__.constructor.call(this, opts);
      this.bins = opts.bins ? opts.bins : Math.log(this.count) / Math.log(2) + 1;
      this.axis2 = opts.yLabel || 'Count';
    }

    Histogram2.prototype.draw = function() {
      var binSize, data, extent, group, top, xAxis, yAxis, ymax,
        _this = this;
      console.log('Histogram2 draw');
      top = this.dimensions[this.axis1].top(Infinity);
      data = _.map(top, function(d) {
        return d[_this.axis1];
      });
      extent = d3.extent(data);
      binSize = (extent[1] - extent[0]) / this.bins;
      group = this.dimensions[this.axis1].group(function(d) {
        return Math.floor(d / binSize);
      });
      data = group.top(Infinity);
      ymax = data[0].value;
      this.x = d3.scale.linear().range([0, this.graphWidth]).domain(extent);
      xAxis = d3.svg.axis().scale(this.x).orient('bottom');
      this.svg.append('g').attr('class', 'x axis').attr('transform', "translate(0, " + this.graphHeight + ")").call(xAxis);
      this.svg.append('text').attr('class', 'x label').attr('text-anchor', 'middle').attr('x', this.graphWidth / 2).attr('y', this.graphHeight + 40).text(this.formatKey(this.axis1));
      this.y = d3.scale.linear().range([this.graphHeight, 0]).domain([0, ymax]);
      yAxis = d3.svg.axis().scale(this.y).orient('left');
      this.svg.append('g').attr('class', 'y axis').attr('transform', "translate(0, 0)").call(yAxis);
      this.svg.append('text').attr('class', 'y label').attr('text-anchor', 'middle').attr('y', -60).attr('x', -(this.graphHeight / 2)).attr('transform', "rotate(-90)").text(this.formatKey(this.axis2));
      return this.bars = this.svg.selectAll('.bar').data(data).enter().append('rect').attr('class', 'bar').attr('x', function(d) {
        return _this.x((d.key + 1) * binSize);
      }).attr('width', this.x(binSize)).attr('y', function(d) {
        return _this.y(d.value);
      }).attr('height', function(d) {
        return _this.graphHeight - _this.y(d.value);
      });
    };

    return Histogram2;

  })(Graph);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Histogram2;
  } else {
    window.Ubret['Histogram2'] = Histogram2;
  }

}).call(this);
