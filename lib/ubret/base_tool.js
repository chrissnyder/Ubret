// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BaseTool = (function() {

    BaseTool.prototype.required_opts = ['data', 'selector', 'el', 'keys'];

    function BaseTool(opts) {
      this.selectKey = __bind(this.selectKey, this);

      this.selectElements = __bind(this.selectElements, this);

      this.uglifyKey = __bind(this.uglifyKey, this);

      this.prettyKey = __bind(this.prettyKey, this);

      this.selectKey = __bind(this.selectKey, this);

      this.selectElement = __bind(this.selectElement, this);

      var opt, _i, _len, _ref;
      console.log('BaseTool');
      _ref = this.required_opts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opt = _ref[_i];
        if (!_.has(opts, opt)) {
          throw "missing option " + opt;
        }
      }
      if (!_.has(opts, 'selector')) {
        throw 'must provide selector';
      } else {
        this.selector = opts.selector;
      }
      if (!_.has(opts, 'keys')) {
        throw 'must provide keys';
      } else {
        this.keys = opts.keys;
      }
      if (!_.has(opts, 'el')) {
        throw 'must provde el';
      } else {
        this.el = opts.el;
      }
      this.selectElementsCb = opts.selectElementsCb || function() {};
      this.selectKeyCb = opts.selectKeyCb || function() {};
      this.selectedElements = opts.selectedElements || null;
      this.selectedKey = opts.selectedKey || 'id';
    }

    BaseTool.prototype.getTemplate = function() {
      return this.template;
    };

    BaseTool.prototype.prettyKey = function(key) {
      return this.capitalizeWords(this.underscoresToSpaces(key));
    };

    BaseTool.prototype.uglifyKey = function(key) {
      return this.spacesToUnderscores(this.lowercaseWords(key));
    };

    BaseTool.prototype.selectElements = function(ids) {
      this.selectedElements = ids;
      this.selectElementsCb(ids);
      return this.start();
    };

    BaseTool.prototype.selectKey = function(key) {
      this.selectedKey = key;
      this.selectKeyCb(key);
      return this.start();
    };

    BaseTool.prototype.formatKey = function(key) {
      return (key.replace(/_/g, " ")).replace(/(\b[a-z])/g, function(char) {
        return char.toUpperCase();
      });
    };

    return BaseTool;

  })();

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = BaseTool;
  } else {
    window.Ubret['BaseTool'] = BaseTool;
  }

}).call(this);
