// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BaseTool = (function() {

    BaseTool.prototype.required_init_opts = ['selector', 'el'];

    BaseTool.prototype.required_render_opts = ['selector', 'el', 'data', 'keys'];

    function BaseTool(opts) {
      this.checkOpts = __bind(this.checkOpts, this);

      this.receiveSetting = __bind(this.receiveSetting, this);

      this.addFilters = __bind(this.addFilters, this);

      this.createDimensions = __bind(this.createDimensions, this);

      this.selectKey = __bind(this.selectKey, this);

      this.selectElements = __bind(this.selectElements, this);

      this.start = __bind(this.start, this);

      this.getTemplate = __bind(this.getTemplate, this);

      this.setOpts = __bind(this.setOpts, this);
      this.setOpts(opts);
      this.checkOpts(this.required_init_opts);
    }

    BaseTool.prototype.setOpts = function(opts) {
      var opt;
      for (opt in opts) {
        switch (opt) {
          case 'data':
            this.data = crossfilter(opts.data);
            this.count = opts.data.length;
            break;
          case 'filters':
            this.addFilters(opts.filters);
            break;
          default:
            this[opt] = opts[opt];
        }
      }
      if (this.data && this.keys) {
        this.createDimensions();
        return this.initialized = true;
      }
    };

    BaseTool.prototype.getTemplate = function() {
      return this.template;
    };

    BaseTool.prototype.start = function() {
      this.el.html('');
      return this.checkOpts(this.required_render_opts);
    };

    BaseTool.prototype.selectElements = function(ids) {
      this.selectedElements = ids;
      this.selectElementsCb(ids);
      return this.start();
    };

    BaseTool.prototype.selectKey = function(key) {
      this.selectedKey = key;
      this.selectKeyCb(key);
      return this.start();
    };

    BaseTool.prototype.createDimensions = function() {
      var key, _i, _len, _ref, _results;
      this.dimensions = new Object;
      _ref = this.keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        this.dimensions.id = this.data.dimension(function(d) {
          return d.id;
        });
        _results.push(this.dimensions[key] = this.data.dimension(function(d) {
          return d[key];
        }));
      }
      return _results;
    };

    BaseTool.prototype.addFilters = function(filters) {
      var filter, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = filters.length; _i < _len; _i++) {
        filter = filters[_i];
        _results.push(this.dimensions[filter.key].filterRange([filter.min, filter.max]));
      }
      return _results;
    };

    BaseTool.prototype.receiveSetting = function(key, value) {
      this[key] = value;
      return this.start();
    };

    BaseTool.prototype.formatKey = function(key) {
      return (key.replace(/_/g, " ")).replace(/(\b[a-z])/g, function(char) {
        return char.toUpperCase();
      });
    };

    BaseTool.prototype.checkOpts = function(required_opts) {
      var opt, _i, _len, _results;
      if (required_opts == null) {
        required_opts = this.required_data_opts;
      }
      _results = [];
      for (_i = 0, _len = required_opts.length; _i < _len; _i++) {
        opt = required_opts[_i];
        if (!_.has(this, opt)) {
          throw "missing option " + opt;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return BaseTool;

  })();

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = BaseTool;
  } else {
    window.Ubret['BaseTool'] = BaseTool;
  }

}).call(this);
