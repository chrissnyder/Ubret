// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Graph,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseTool = window.Ubret.BaseTool || require('./base_tool');

  Graph = (function(_super) {

    __extends(Graph, _super);

    function Graph(opts) {
      this.start = __bind(this.start, this);

      this.setupAxes = __bind(this.setupAxes, this);

      var compiled;
      console.log('Graph');
      Graph.__super__.constructor.call(this, opts);
      compiled = _.template(this.template, {
        selector: this.selector
      });
      this.el.html(compiled);
      this.width = opts.width || this.el.width();
      this.height = opts.height || this.el.height();
      this.margin = opts.margin || {
        left: 60,
        top: 20,
        bottom: 60,
        right: 40
      };
      this.format = opts.format ? d3.format(opts.format) : d3.format(',.02f');
      this.color = opts.color || '#0172E6';
      this.selectionColor = opts.selectionColor || '#CD3E20';
    }

    Graph.prototype.setupAxes = function() {
      var axis, key, _i, _ref, _ref1;
      console.log('Graph setupAxes');
      for (axis = _i = 1, _ref = this.axes; 1 <= _ref ? _i <= _ref : _i >= _ref; axis = 1 <= _ref ? ++_i : --_i) {
        key = "axis" + axis;
        if ((_ref1 = this[key]) === "" || _ref1 === (void 0)) {
          return;
        }
      }
      this.el.find('svg').empty();
      this.graphHeight = this.height - (this.margin.top + this.margin.bottom);
      this.graphWidth = this.width - (this.margin.left + this.margin.right);
      this.svg = d3.select("" + this.selector + " svg").attr('width', this.width).attr('height', this.height).append('g').attr('transform', "translate(" + this.margin.left + ", " + this.margin.top + ")");
      return this.draw();
    };

    Graph.prototype.start = function() {
      return this.setupAxes();
    };

    Graph.prototype.bufferAxes = function(domain) {
      var border, i, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = domain.length; _i < _len; i = ++_i) {
        border = domain[i];
        if (border > 0) {
          _results.push(border = border - (border * 0.15));
        } else {
          _results.push(border = border + (border * 0.15));
        }
      }
      return _results;
    };

    return Graph;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Graph;
  } else {
    window.Ubret['Graph'] = Graph;
  }

}).call(this);
