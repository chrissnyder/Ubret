// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Graph,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseTool = window.Ubret.BaseTool || require('./base_tool');

  Graph = (function(_super) {

    __extends(Graph, _super);

    function Graph(opts) {
      this.start = __bind(this.start, this);

      this.setXVar = __bind(this.setXVar, this);

      this.drawBars = __bind(this.drawBars, this);

      this.createGraph = __bind(this.createGraph, this);

      var compiled;
      console.log('Graph');
      Graph.__super__.constructor.call(this, opts);
      compiled = _.template(this.template, {
        selector: this.selector
      });
      this.el.html(compiled);
      this.height = opts.width || this.el.height();
      this.width = opts.height || this.el.width();
      this.margin = opts.margin || {
        left: 60,
        top: 20,
        bottom: 60,
        right: 40
      };
      this.format = opts.format ? d3.format(opts.format) : d3.format(',.02f');
      this.color = opts.color || '#0172E6';
      this.selectionColor = opts.selectionColor || '#CD3E20';
    }

    Graph.prototype.createGraph = function() {
      var axis, _i, _ref, _results;
      console.log("selector", this.selector);
      _results = [];
      for (axis = _i = 1, _ref = this.axes; 1 <= _ref ? _i <= _ref : _i >= _ref; axis = 1 <= _ref ? ++_i : --_i) {
        _results.push(console.log(axis));
      }
      return _results;
    };

    Graph.prototype.drawBars = function(bins, color, halfSize, offset) {
      var bar, width, witth,
        _this = this;
      if (halfSize == null) {
        halfSize = false;
      }
      if (offset == null) {
        offset = false;
      }
      width = this.x(bins[1].x) - this.x(bins[0].x);
      width = halfSize ? (width / 2) - 1 : width - 2;
      witth = offset ? width - 1 : width;
      bar = this.svg.selectAll(".bar-" + color).data(bins).enter().append('g').attr('class', 'bar').attr('transform', function(d) {
        if (offset) {
          return "translate(" + (_this.x(d.x) + width + 1) + ", " + (_this.y(d.y) - 1) + ")";
        } else {
          return "translate(" + (_this.x(d.x)) + ", " + (_this.y(d.y) - 1) + ")";
        }
      });
      bar.append('rect').attr('x', 1).attr('width', Math.floor(width)).attr('height', function(d) {
        return _this.graphHeight - _this.y(d.y);
      }).attr('fill', color);
      return bar.append('text').attr("dy", ".75em").attr("y", 6).attr("x", width / 2).attr("text-anchor", "middle").text(function(d) {
        return _this.formatCount(d.y);
      });
    };

    Graph.prototype.setXVar = function(variable) {
      this.selectedKey = variable;
      return this.createGraph();
    };

    Graph.prototype.start = function() {
      return this.createGraph();
    };

    return Graph;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Graph;
  } else {
    window.Ubret['Graph'] = Graph;
  }

}).call(this);
