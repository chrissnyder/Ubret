// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Table,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseTool = window.Ubret.BaseTool || require('./base_tool');

  Table = (function(_super) {

    __extends(Table, _super);

    function Table(opts) {
      this.selection = __bind(this.selection, this);

      this.changeData = __bind(this.changeData, this);

      this.highlightRows = __bind(this.highlightRows, this);

      this.toArray = __bind(this.toArray, this);

      this.createRows = __bind(this.createRows, this);

      this.createHeader = __bind(this.createHeader, this);

      this.createTable = __bind(this.createTable, this);

      this.start = __bind(this.start, this);
      Table.__super__.constructor.call(this, opts);
      this.sortOrder = 'top';
      this.createTable();
      this.start();
    }

    Table.prototype.start = function() {
      this.createHeader();
      return this.createRows();
    };

    Table.prototype.createTable = function() {
      var table;
      table = d3.select(this.selector).append('table');
      this.thead = table.append('thead');
      return this.tbody = table.append('tbody');
    };

    Table.prototype.createHeader = function() {
      var _this = this;
      return this.thead.selectAll("th").data(this.keys).enter().append("th").on('click', function(d, i) {
        return _this.selectKey(d);
      }).attr('data-key', function(d) {
        return d;
      }).text(function(d) {
        return _this.formatKey(d);
      });
    };

    Table.prototype.createRows = function() {
      var tr,
        _this = this;
      this.tbody.selectAll('tr').remove();
      tr = this.tbody.selectAll('tr').data(this.dimensions[this.selectedKey][this.sortOrder](Infinity)).enter().append('tr').attr('data-id', function(d) {
        return d.id;
      }).on('click', this.selection);
      tr.selectAll('td').data(function(d) {
        return _this.toArray(d);
      }).enter().append('td').text(function(d) {
        return d;
      });
      if (this.selectedElements) {
        return this.highlightRows();
      }
    };

    Table.prototype.toArray = function(data) {
      var key, ret, _i, _len, _ref;
      ret = new Array;
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        ret.push(data[key]);
      }
      return ret;
    };

    Table.prototype.highlightRows = function() {
      var id, _i, _len, _ref, _results;
      _ref = this.selectedElements;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        _results.push(this.tbody.select("[data-id=" + id + "]").attr('class', 'selected'));
      }
      return _results;
    };

    Table.prototype.changeData = function(data) {
      this.data = data;
      return this.createRows();
    };

    Table.prototype.selectKey = function(key) {
      if (key === this.selectedKey && this.sortOrder === 'top') {
        this.sortOrder = 'bottom';
      } else {
        this.sortOrder = 'top';
      }
      return Table.__super__.selectKey.call(this, key);
    };

    Table.prototype.selection = function(d, i) {
      var ids, index;
      ids = this.selectedElements;
      if (d3.event.shiftKey) {
        index = _.indexOf(this.selectedElements, d.id);
        if (index === -1) {
          ids.push(d.id);
        } else {
          ids = _.without(ids, d.id);
        }
      } else {
        ids = [d.id];
      }
      return this.selectElements(ids);
    };

    return Table;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Table;
  } else {
    window.Ubret['Table'] = Table;
  }

}).call(this);
