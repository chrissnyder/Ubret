// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Table,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    BaseTool = require('./base_tool');
  } catch (error) {
    BaseTool = window.Ubret.BaseTool;
  }

  Table = (function(_super) {

    __extends(Table, _super);

    function Table(opts) {
      this.changeData = __bind(this.changeData, this);

      this.highlightRow = __bind(this.highlightRow, this);

      this.selectColumn = __bind(this.selectColumn, this);

      this.toArray = __bind(this.toArray, this);

      this.createRows = __bind(this.createRows, this);

      this.createHeader = __bind(this.createHeader, this);

      this.selectTable = __bind(this.selectTable, this);

      this.start = __bind(this.start, this);
      Table.__super__.constructor.call(this, opts);
      this.selectTable();
      this.createHeader();
      this.start();
    }

    Table.prototype.start = function() {
      return this.createRows();
    };

    Table.prototype.selectTable = function() {
      this.thead = d3.select("" + this.selector + " thead");
      return this.tbody = d3.select("" + this.selector + " tbody");
    };

    Table.prototype.createHeader = function() {
      var _this = this;
      return this.thead.selectAll("th").data(this.keys).enter().append("th").on('click', function(d, i) {
        return _this.selectKey(d);
      }).attr('data-key', function(d) {
        return d;
      }).text(function(d) {
        return _this.formatKey(d);
      });
    };

    Table.prototype.createRows = function() {
      var tr,
        _this = this;
      console.log(this.selectedElement);
      this.tbody.selectAll('tr').remove();
      tr = this.tbody.selectAll('tr').data(this.data).enter().append('tr').sort(function(a, b) {
        if (a === null || b === null) {
          return 0;
        } else {
          return _this.compare(a[_this.selectedKey], b[_this.selectedKey]);
        }
      }).attr('data-id', function(d) {
        return d.id;
      }).on('click', function(d, i) {
        return _this.selectElement(d.id);
      });
      tr.selectAll('td').data(function(d) {
        return _this.toArray(d);
      }).enter().append('td').text(function(d) {
        return d;
      });
      if (this.selectedElement) {
        return this.highlightRow();
      }
    };

    Table.prototype.compare = function(a, b) {
      if (typeof a === 'string') {
        return a.localeCompare(b);
      } else {
        if (a < b) {
          return -1;
        } else {
          if (a > b) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };

    Table.prototype.toArray = function(data) {
      var key, ret, _i, _len, _ref;
      ret = new Array;
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        ret.push(data[key]);
      }
      return ret;
    };

    Table.prototype.formatKey = function(key) {
      return (key.replace(/_/g, " ")).replace(/(\b[a-z])/g, function(char) {
        return char.toUpperCase();
      });
    };

    Table.prototype.selectColumn = function(key) {
      return this.createRows(key);
    };

    Table.prototype.highlightRow = function() {
      console.log(this.selectedElement);
      return this.tbody.select("[data-id=" + this.selectedElement + "]").attr('class', 'selected');
    };

    Table.prototype.changeData = function(data) {
      this.data = data;
      return this.createRows();
    };

    return Table;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Table;
  } else {
    window.Ubret['Table'] = Table;
  }

}).call(this);
