// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, SubjectViewer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseTool = window.Ubret.BaseTool || require('./base_tool');

  SubjectViewer = (function(_super) {

    __extends(SubjectViewer, _super);

    function SubjectViewer(opts) {
      this.toArray = __bind(this.toArray, this);

      this.render = __bind(this.render, this);

      this.start = __bind(this.start, this);
      SubjectViewer.__super__.constructor.apply(this, arguments);
      this.count = 0;
      this.div = d3.select(this.selector);
      this.start();
    }

    SubjectViewer.prototype.start = function() {
      var subjects,
        _this = this;
      subjects = new Array;
      if (this.selectedElements.length !== 0) {
        subjects = this.dimensions.id.top(Infinity).filter(function(item) {
          var _ref;
          return _ref = item.id, __indexOf.call(_this.selectedElements, _ref) >= 0;
        });
      } else {
        subjects = [this.dimensions.id.top(1)[0]];
        this.selectElements(subjects);
      }
      return this.render(subjects);
    };

    SubjectViewer.prototype.render = function(subjects) {
      var subject,
        _this = this;
      this.div.selectAll('div.subject').remove();
      subject = this.div.selectAll('div').data(subjects).enter().append('div').attr('class', 'subject');
      subject.selectAll('img').append('img').attr('src', function(d) {
        return d.image;
      });
      subject.selectAll('ul').append('ul').data(function(d) {
        return _this.toArray(d);
      }).enter().append('li').attr('data-key', function(d) {
        return d[0];
      }).text(function(d) {
        return "" + (_this.formatKey(d[0])) + ": " + d[1];
      });
      return subject.select("[data-key=\"" + this.selectedKey + "\"]").attr('class', 'selected');
    };

    SubjectViewer.prototype.toArray = function(data) {
      var arrayedData, key, _i, _len, _ref;
      arrayedData = new Array;
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        arrayedData.push([key, data[key]]);
      }
      return arrayedData;
    };

    return SubjectViewer;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = SubjectViewer;
  } else {
    window.Ubret['SubjectViewer'] = SubjectViewer;
  }

}).call(this);
