// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Map,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseTool = window.Ubret.BaseTool || require('./base_tool');

  Map = (function(_super) {

    __extends(Map, _super);

    Map.mapOptions = {
      attributionControl: false
    };

    L.Icon.Default.imagePath = '/images';

    Map.prototype.default_icon = new L.icon({
      className: 'default_icon',
      iconUrl: '/images/marker-icon.png',
      iconSize: [25, 41],
      iconAnchor: [13, 41]
    });

    Map.prototype.selected_icon = new L.icon({
      className: 'selected_icon',
      iconUrl: '/images/marker-icon-orange.png',
      iconSize: [25, 41],
      iconAnchor: [13, 41]
    });

    function Map(opts) {
      this.selectSubject = __bind(this.selectSubject, this);

      this.selected = __bind(this.selected, this);

      this.plotObjects = __bind(this.plotObjects, this);

      this.plotObject = __bind(this.plotObject, this);

      this.createSky = __bind(this.createSky, this);

      this.start = __bind(this.start, this);
      Map.__super__.constructor.call(this, opts);
      this.circles = [];
    }

    Map.prototype.start = function() {
      if (this.map) {
        return this.map.invalidateSize(true);
      } else {
        return this.createSky();
      }
    };

    Map.prototype.createSky = function() {
      this.map = L.map(this.el.attr('id'), Map.mapOptions).setView([0, 180], 6);
      this.layer = L.tileLayer('/tiles/#{zoom}/#{tilename}.jpg', {
        maxZoom: 7
      });
      this.layer.getTileUrl = function(tilePoint) {
        var convertTileUrl, url, zoom;
        zoom = this._getZoomForUrl();
        convertTileUrl = function(x, y, s, zoom) {
          var d, e, f, g, pixels;
          pixels = Math.pow(2, zoom);
          d = (x + pixels) % pixels;
          e = (y + pixels) % pixels;
          f = "t";
          g = 0;
          while (g < zoom) {
            pixels = pixels / 2;
            if (e < pixels) {
              if (d < pixels) {
                f += "q";
              } else {
                f += "r";
                d -= pixels;
              }
            } else {
              if (d < pixels) {
                f += "t";
                e -= pixels;
              } else {
                f += "s";
                d -= pixels;
                e -= pixels;
              }
            }
            g++;
          }
          return {
            x: x,
            y: y,
            src: f,
            s: s
          };
        };
        url = convertTileUrl(tilePoint.x, tilePoint.y, 1, zoom);
        return "/images/tiles/" + zoom + "/" + url.src + ".jpg";
      };
      return this.layer.addTo(this.map);
    };

    Map.prototype.plotObject = function(subject, options) {
      var circle, coords, icon;
      coords = [subject.dec, subject.ra];
      options = icon = new L.icon({
        iconSize: [25, 41],
        iconAnchor: [13, 41]
      });
      circle = new L.marker(coords, options);
      circle.zooniverse_id = subject.zooniverse_id;
      circle.addTo(this.map);
      return this.circles.push(circle);
    };

    Map.prototype.plotObjects = function() {
      var data, latlng, marker, subject, _i, _j, _len, _len1, _ref;
      data = this.dimensions.id.top(30);
      _ref = this.circles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        marker = _ref[_i];
        this.map.removeLayer(marker);
      }
      this.circles = new Array;
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        subject = data[_j];
        this.plotObject(subject);
      }
      latlng = new L.LatLng(data[0].dec, data[0].ra);
      return this.map.panTo(latlng);
    };

    Map.prototype.selected = function(itemId) {
      var c, circle, item, latlng;
      item = _.find(this.data, function(subject) {
        return subject.zooniverse_id = itemId;
      });
      latlng = new L.LatLng(item.dec, item.ra);
      circle = ((function() {
        var _i, _len, _ref, _results;
        _ref = this.circles;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (c.zooniverse_id === itemId) {
            _results.push(c);
          }
        }
        return _results;
      }).call(this))[0];
      return this.selectSubject(circle);
    };

    Map.prototype.selectSubject = function(circle) {
      if (this.selected_subject != null) {
        this.selected_subject.setIcon(this.default_icon);
      }
      this.selected_subject = circle;
      circle.openPopup();
      return circle.setIcon(this.selected_icon);
    };

    return Map;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Map;
  } else {
    window.Ubret['Map'] = Map;
  }

}).call(this);
