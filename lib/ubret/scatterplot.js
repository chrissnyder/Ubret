// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Scatterplot,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  BaseTool = window.Ubret.BaseTool || require('./base_tool');

  Scatterplot = (function(_super) {

    __extends(Scatterplot, _super);

    Scatterplot.prototype.attributes = {
      currentSubject: {
        name: 'currentSubject'
      }
    };

    Scatterplot.prototype.template = "<div id=\"<%- selector %>\">\n  <svg></svg>\n</div>";

    Scatterplot.prototype.tooltip = "<div class=\"tooltip\">\n  <ul>\n    <li><label><%- xAxis %>:</label><span><%- xAxisVal %></span></li>\n    <li><label><%- yAxis %>:</label><span><%- yAxisVal %></span></li>\n  </ul>\n</div>";

    function Scatterplot() {
      this.start = __bind(this.start, this);

      this.setYVar = __bind(this.setYVar, this);

      this.setXVar = __bind(this.setXVar, this);

      this.calculateTicks = __bind(this.calculateTicks, this);

      this.drawPoints = __bind(this.drawPoints, this);

      this.drawAxes = __bind(this.drawAxes, this);

      this.createGraph = __bind(this.createGraph, this);

      this.dataToCoordinates = __bind(this.dataToCoordinates, this);

      this.select = __bind(this.select, this);

      this.removeTooltip = __bind(this.removeTooltip, this);

      this.displayTooltip = __bind(this.displayTooltip, this);

      var compiled;
      Scatterplot.__super__.constructor.apply(this, arguments);
      compiled = _.template(this.template, {
        selector: this.selector
      });
      this.el.html(compiled);
      this.height = this.el.height() || this.height;
      this.width = this.el.width() || this.width;
      this.margin = this.margin || {
        top: 17,
        right: 40,
        bottom: 55,
        left: 75
      };
      this.color = this.color || 'teal';
      this.selectionColor = this.selectionColor || 'orange';
      this.xFormat = this.xFormat || d3.format(',.02f');
      this.yFormat = this.yFormat || d3.format(',.02f');
    }

    Scatterplot.prototype.displayTooltip = function(d, i) {
      var left, tooltip, top, xAxis, xAxisVal, yAxis, yAxisVal;
      xAxis = this.prettyKey(this.xAxisKey);
      yAxis = this.prettyKey(this.yAxisKey);
      xAxisVal = this.xFormat(d.x);
      yAxisVal = this.yFormat(d.y);
      top = d3.event.pageY - 50;
      left = d3.event.pageX + 10;
      tooltip = _.template(this.tooltip, {
        xAxis: xAxis,
        yAxis: yAxis,
        xAxisVal: xAxisVal,
        yAxisVal: yAxisVal
      });
      this.el.append(tooltip);
      return this.el.find('.tooltip').offset({
        top: top,
        left: left
      });
    };

    Scatterplot.prototype.removeTooltip = function(d, i) {
      return this.el.find('.tooltip').remove();
    };

    Scatterplot.prototype.select = function(itemId) {
      return _.indexOf(this.filteredData(itemId));
    };

    Scatterplot.prototype.dataToCoordinates = function(d) {
      var coordinate;
      coordinate = {
        x: d[this.xAxisKey],
        y: d[this.yAxisKey],
        classification: d['classification']
      };
      if ((this.selectedData != null) && __indexOf.call(this.selectedData, d) >= 0) {
        coordinate['color'] = this.selectionColor;
      } else {
        coordinate['color'] = this.color;
      }
      return coordinate;
    };

    Scatterplot.prototype.createGraph = function() {
      var graphData;
      if ((typeof this.xAxisKey === 'undefined') && (typeof this.yAxixKey === 'undefined')) {
        return;
      }
      this.el.find('svg').empty();
      this.graphWidth = this.width - this.margin.left - this.margin.right;
      this.graphHeight = this.height - this.margin.top - this.margin.bottom;
      this.svg = d3.select("" + this.selector + " svg").attr('width', this.width).attr('height', this.height).append('g').attr('transform', "translate(" + this.margin.left + ", " + this.margin.top + ")");
      graphData = this.drawAxes();
      return this.drawPoints(graphData, this.color);
    };

    Scatterplot.prototype.drawAxes = function() {
      var data, xAxis, xDomain, yAxis, yDomain;
      if (this.data.length !== 0) {
        data = _.map(this.data, this.dataToCoordinates);
        xDomain = this.bufferAxes(d3.extent(data, function(d) {
          return d.x;
        }));
        yDomain = this.bufferAxes(d3.extent(data, function(d) {
          return d.y;
        }));
      } else {
        data = [];
        xDomain = [0, 10];
        yDomain = [0, 10];
      }
      if (typeof this.xAxisKey !== 'undefined') {
        this.x = d3.scale.linear().domain(xDomain).range([0, this.graphWidth]);
        xAxis = d3.svg.axis().scale(this.x).orient('bottom').tickFormat(this.xFormat);
        if (data.length !== 0) {
          xAxis.tickValues(this.calculateTicks(this.x));
        }
        this.svg.append('g').attr('class', 'x axis').attr('transform', "translate(0, " + this.graphHeight + ")").call(xAxis);
        this.svg.append('text').attr('class', 'x label').attr('text-anchor', 'middle').attr('x', this.graphWidth / 2).attr('y', this.graphHeight + 40).text(this.prettyKey(this.xAxisKey));
      }
      if (typeof this.yAxisKey !== 'undefined') {
        this.y = d3.scale.linear().domain(yDomain).range([this.graphHeight, 0]);
        yAxis = d3.svg.axis().scale(this.y).orient('left').tickFormat(this.yFormat);
        if (data.length !== 0) {
          yAxis.tickValues(this.calculateTicks(this.y));
        }
        this.svg.append('g').attr('class', 'y axis').attr('transform', 'translate(0, 0)').call(yAxis);
        this.svg.append('text').attr('class', 'y label').attr('text-anchor', 'middle').attr('y', -60).attr('x', -(this.graphHeight / 2)).attr('transform', "rotate(-90)").text(this.prettyKey(this.yAxisKey));
      }
      return data;
    };

    Scatterplot.prototype.drawPoints = function(data) {
      var point,
        _this = this;
      if (data.length !== 0) {
        point = this.svg.selectAll('.point').data(data).enter().append('g').attr('class', 'point').attr('transform', function(d) {
          if (!(d.x != null) || !(d.y != null)) {

          } else {
            return "translate(" + (_this.x(d.x)) + ", " + (_this.y(d.y)) + ")";
          }
        }).on('mouseover', this.displayTooltip).on('mouseout', this.removeTooltip);
        return point.append('circle').attr('r', 3).attr('id', function(d) {
          return d.x;
        }).attr('fill', function(d) {
          return d.color;
        });
      }
    };

    Scatterplot.prototype.bufferAxes = function(domain) {
      var border, i, _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = domain.length; _i < _len; i = ++_i) {
        border = domain[i];
        if (border > 0) {
          _results.push(border = border - (border * 0.15));
        } else {
          _results.push(border = border + (border * 0.15));
        }
      }
      return _results;
    };

    Scatterplot.prototype.calculateTicks = function(axis) {
      var max, min, numTicks, tick, tickWidth, ticks;
      min = _.first(axis.domain());
      max = _.last(axis.domain());
      ticks = [min, max];
      numTicks = Math.floor(this.graphWidth / 50);
      tickWidth = (max - min) / numTicks;
      tick = min + tickWidth;
      while (tick < max) {
        ticks.push(tick);
        tick = tick + tickWidth;
      }
      return ticks;
    };

    Scatterplot.prototype.setXVar = function(variable) {
      this.xAxisKey = variable;
      return this.createGraph();
    };

    Scatterplot.prototype.setYVar = function(variable) {
      this.yAxisKey = variable;
      return this.createGraph();
    };

    Scatterplot.prototype.start = function() {
      return this.createGraph();
    };

    return Scatterplot;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Scatterplot;
  } else {
    window.Ubret['Scatterplot'] = Scatterplot;
  }

}).call(this);
